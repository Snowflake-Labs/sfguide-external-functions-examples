# Cloudformation template for setting up AWS side of things for external functions.
# This template creates an API Gateway, a Lambda Function and two IAM roles and hooks everything up.

# Steps for creating external function using this template:
# 1. Go to AWS cloudformation and create a stack using this template
# 2. Note the Gateway IAM role and URL of the "echo" method created in the API Gateway
# 3. Create API integration in Snowflake using the Gatway URL and Gateway Role ARN
# 4. Update the API Gateway role trust relation with API integrations API_AWS_IAM_USER_ARN and API_AWS_EXTERNAL_ID
# 5. Create and run the external function

AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway and Lambda function for Snowflake external functions"

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[-a-z0-9]+$"
    Default: "ext-func-stage"
    Description: "API deployment stage"

  lambdaName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "ext-func-lambda"
    Description: "Lambda instance name"

  apiGatewayName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "ext-func-api"
    Description: "API Gateway instance name"

  apiGatewayIAMRoleName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "ext-func-api-role"
    Description: "This is the role that will be used in Snowflake API Integration"

  lambdaExecutionRoleName:
    Type: "String"
    Default: "ext-func-lambda-role" 
    Description: "Role used by the Lambda."


Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    DependsOn : apiIAMRole
    Properties:
      Name: !Ref "apiGatewayName"
      Description: "Snowflake external functions Gateway"
      Policy: !Sub  
          - '{ "Version": "2012-10-17", "Statement": [ {  "Effect": "Allow", "Principal": { "AWS": "arn:aws:sts::${AWS::AccountId}:assumed-role/${apiGatewayIAMRoleName}/snowflake" }, "Action": "execute-api:Invoke", "Resource": "${resourceArn}" }  ] }'
          - resourceArn : !Join [ "", [ "execute-api:/", "*" ] ]
      EndpointConfiguration:
        Types:
          - REGIONAL    

  apiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt 
        - apiGateway
        - RootResourceId
      PathPart: echo
      
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref "apiResource"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: !Ref "apiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn : lambdaExecutionIAMRole
    Properties:
      Code:
        ZipFile: |
          import json

          def handler(event, context):
              status_code = 200
              array_of_rows_to_return = []

              try:
                  event_body = event["body"]

                  payload = json.loads(event_body)
                  rows = payload["data"]

                  for row in rows:
                      row_number = row[0]

                      input_value_1 = row[1]

                      input_value_2 = row[2]
                      
                      output_value = ["Echoing inputs:", input_value_1, input_value_2]

                      row_to_return = [row_number, output_value]

                      array_of_rows_to_return.append(row_to_return)

                  json_compatible_string_to_return = json.dumps({"data" : array_of_rows_to_return})

              except Exception as err:
                  status_code = 400
                  json_compatible_string_to_return = event_body

              return {
                  'statusCode': status_code,
                  'body': json_compatible_string_to_return
              }
      Description: "Echo Lambda created from CloudFormation template"
      FunctionName: !Ref "lambdaName"
      Handler: "index.handler"
      Role: !GetAtt "lambdaExecutionIAMRole.Arn" 
      Runtime: "python3.7"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"

  apiIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName : !Ref "apiGatewayIAMRoleName"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"

  lambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName : !Ref "lambdaExecutionRoleName"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"  

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/echo"

  roleArn:
    Value: !GetAtt "apiIAMRole.Arn"